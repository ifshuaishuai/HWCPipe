//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace HWCPipe {

public class GpuProfiler : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GpuProfiler(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GpuProfiler obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GpuProfiler() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HWCPipeAndroidPINVOKE.delete_GpuProfiler(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual SWIGTYPE_p_std__unordered_setT_hwcpipe__GpuCounter_hwcpipe__GpuCounterHash_t enabled_counters() {
    SWIGTYPE_p_std__unordered_setT_hwcpipe__GpuCounter_hwcpipe__GpuCounterHash_t ret = new SWIGTYPE_p_std__unordered_setT_hwcpipe__GpuCounter_hwcpipe__GpuCounterHash_t(HWCPipeAndroidPINVOKE.GpuProfiler_enabled_counters(swigCPtr), false);
    return ret;
  }

  public virtual SWIGTYPE_p_std__unordered_setT_hwcpipe__GpuCounter_hwcpipe__GpuCounterHash_t supported_counters() {
    SWIGTYPE_p_std__unordered_setT_hwcpipe__GpuCounter_hwcpipe__GpuCounterHash_t ret = new SWIGTYPE_p_std__unordered_setT_hwcpipe__GpuCounter_hwcpipe__GpuCounterHash_t(HWCPipeAndroidPINVOKE.GpuProfiler_supported_counters(swigCPtr), false);
    return ret;
  }

  public virtual void set_enabled_counters(SWIGTYPE_p_std__unordered_setT_hwcpipe__GpuCounter_hwcpipe__GpuCounterHash_t counters) {
    HWCPipeAndroidPINVOKE.GpuProfiler_set_enabled_counters(swigCPtr, SWIGTYPE_p_std__unordered_setT_hwcpipe__GpuCounter_hwcpipe__GpuCounterHash_t.getCPtr(counters));
    if (HWCPipeAndroidPINVOKE.SWIGPendingException.Pending) throw HWCPipeAndroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void run() {
    HWCPipeAndroidPINVOKE.GpuProfiler_run(swigCPtr);
  }

  public virtual SWIGTYPE_p_std__unordered_mapT_hwcpipe__GpuCounter_Value_hwcpipe__GpuCounterHash_t sample() {
    SWIGTYPE_p_std__unordered_mapT_hwcpipe__GpuCounter_Value_hwcpipe__GpuCounterHash_t ret = new SWIGTYPE_p_std__unordered_mapT_hwcpipe__GpuCounter_Value_hwcpipe__GpuCounterHash_t(HWCPipeAndroidPINVOKE.GpuProfiler_sample(swigCPtr), false);
    return ret;
  }

  public virtual void stop() {
    HWCPipeAndroidPINVOKE.GpuProfiler_stop(swigCPtr);
  }

}

}
