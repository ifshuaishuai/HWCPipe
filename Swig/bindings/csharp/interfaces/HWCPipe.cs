//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace HWCPipe {

public class HWCPipe : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal HWCPipe(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HWCPipe obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~HWCPipe() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HWCPipeAndroidPINVOKE.delete_HWCPipe(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public HWCPipe(string json_string) : this(HWCPipeAndroidPINVOKE.new_HWCPipe__SWIG_0(json_string), true) {
  }

  public HWCPipe(SWIGTYPE_p_CpuCounterSet enabled_cpu_counters, SWIGTYPE_p_GpuCounterSet enabled_gpu_counters) : this(HWCPipeAndroidPINVOKE.new_HWCPipe__SWIG_1(SWIGTYPE_p_CpuCounterSet.getCPtr(enabled_cpu_counters), SWIGTYPE_p_GpuCounterSet.getCPtr(enabled_gpu_counters)), true) {
    if (HWCPipeAndroidPINVOKE.SWIGPendingException.Pending) throw HWCPipeAndroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public HWCPipe() : this(HWCPipeAndroidPINVOKE.new_HWCPipe__SWIG_2(), true) {
  }

  public void set_enabled_cpu_counters(SWIGTYPE_p_CpuCounterSet counters) {
    HWCPipeAndroidPINVOKE.HWCPipe_set_enabled_cpu_counters(swigCPtr, SWIGTYPE_p_CpuCounterSet.getCPtr(counters));
    if (HWCPipeAndroidPINVOKE.SWIGPendingException.Pending) throw HWCPipeAndroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_enabled_gpu_counters(SWIGTYPE_p_GpuCounterSet counters) {
    HWCPipeAndroidPINVOKE.HWCPipe_set_enabled_gpu_counters(swigCPtr, SWIGTYPE_p_GpuCounterSet.getCPtr(counters));
    if (HWCPipeAndroidPINVOKE.SWIGPendingException.Pending) throw HWCPipeAndroidPINVOKE.SWIGPendingException.Retrieve();
  }

  public void run() {
    HWCPipeAndroidPINVOKE.HWCPipe_run(swigCPtr);
  }

  public Measurements sample() {
    Measurements ret = new Measurements(HWCPipeAndroidPINVOKE.HWCPipe_sample(swigCPtr), true);
    return ret;
  }

  public void stop() {
    HWCPipeAndroidPINVOKE.HWCPipe_stop(swigCPtr);
  }

  public SWIGTYPE_p_CpuProfiler cpu_profiler() {
    global::System.IntPtr cPtr = HWCPipeAndroidPINVOKE.HWCPipe_cpu_profiler(swigCPtr);
    SWIGTYPE_p_CpuProfiler ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CpuProfiler(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_GpuProfiler gpu_profiler() {
    global::System.IntPtr cPtr = HWCPipeAndroidPINVOKE.HWCPipe_gpu_profiler(swigCPtr);
    SWIGTYPE_p_GpuProfiler ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GpuProfiler(cPtr, false);
    return ret;
  }

}

}
