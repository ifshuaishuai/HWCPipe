//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace HWCPipe {

class HWCPipeAndroidPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="SWIGRegisterExceptionCallbacks_HWCPipeAndroid")]
    public static extern void SWIGRegisterExceptionCallbacks_HWCPipeAndroid(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_HWCPipeAndroid")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_HWCPipeAndroid(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_HWCPipeAndroid(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_HWCPipeAndroid(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="SWIGRegisterStringCallback_HWCPipeAndroid")]
    public static extern void SWIGRegisterStringCallback_HWCPipeAndroid(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_HWCPipeAndroid(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static HWCPipeAndroidPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_Measurements_cpu_set")]
  public static extern void Measurements_cpu_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_Measurements_cpu_get")]
  public static extern global::System.IntPtr Measurements_cpu_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_Measurements_gpu_set")]
  public static extern void Measurements_gpu_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_Measurements_gpu_get")]
  public static extern global::System.IntPtr Measurements_gpu_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_new_Measurements")]
  public static extern global::System.IntPtr new_Measurements();

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_delete_Measurements")]
  public static extern void delete_Measurements(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_new_HWCPipe__SWIG_0")]
  public static extern global::System.IntPtr new_HWCPipe__SWIG_0(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_new_HWCPipe__SWIG_1")]
  public static extern global::System.IntPtr new_HWCPipe__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_new_HWCPipe__SWIG_2")]
  public static extern global::System.IntPtr new_HWCPipe__SWIG_2();

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_HWCPipe_set_enabled_cpu_counters")]
  public static extern void HWCPipe_set_enabled_cpu_counters(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_HWCPipe_set_enabled_gpu_counters")]
  public static extern void HWCPipe_set_enabled_gpu_counters(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_HWCPipe_run")]
  public static extern void HWCPipe_run(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_HWCPipe_sample")]
  public static extern global::System.IntPtr HWCPipe_sample(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_HWCPipe_stop")]
  public static extern void HWCPipe_stop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_HWCPipe_cpu_profiler")]
  public static extern global::System.IntPtr HWCPipe_cpu_profiler(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_HWCPipe_gpu_profiler")]
  public static extern global::System.IntPtr HWCPipe_gpu_profiler(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_delete_HWCPipe")]
  public static extern void delete_HWCPipe(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_cpu_counter_names_get")]
  public static extern global::System.IntPtr cpu_counter_names_get();

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_new_CpuCounterHash")]
  public static extern global::System.IntPtr new_CpuCounterHash();

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_delete_CpuCounterHash")]
  public static extern void delete_CpuCounterHash(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_CpuCounterInfo_desc_set")]
  public static extern void CpuCounterInfo_desc_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_CpuCounterInfo_desc_get")]
  public static extern global::System.IntPtr CpuCounterInfo_desc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_CpuCounterInfo_unit_set")]
  public static extern void CpuCounterInfo_unit_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_CpuCounterInfo_unit_get")]
  public static extern global::System.IntPtr CpuCounterInfo_unit_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_new_CpuCounterInfo")]
  public static extern global::System.IntPtr new_CpuCounterInfo();

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_delete_CpuCounterInfo")]
  public static extern void delete_CpuCounterInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_cpu_counter_info_get")]
  public static extern global::System.IntPtr cpu_counter_info_get();

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_delete_CpuProfiler")]
  public static extern void delete_CpuProfiler(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_CpuProfiler_enabled_counters")]
  public static extern global::System.IntPtr CpuProfiler_enabled_counters(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_CpuProfiler_supported_counters")]
  public static extern global::System.IntPtr CpuProfiler_supported_counters(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_CpuProfiler_set_enabled_counters")]
  public static extern void CpuProfiler_set_enabled_counters(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_CpuProfiler_run")]
  public static extern void CpuProfiler_run(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_CpuProfiler_sample")]
  public static extern global::System.IntPtr CpuProfiler_sample(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_CpuProfiler_stop")]
  public static extern void CpuProfiler_stop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_gpu_counter_names_get")]
  public static extern global::System.IntPtr gpu_counter_names_get();

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_new_GpuCounterHash")]
  public static extern global::System.IntPtr new_GpuCounterHash();

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_delete_GpuCounterHash")]
  public static extern void delete_GpuCounterHash(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_GpuCounterInfo_desc_set")]
  public static extern void GpuCounterInfo_desc_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_GpuCounterInfo_desc_get")]
  public static extern global::System.IntPtr GpuCounterInfo_desc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_GpuCounterInfo_unit_set")]
  public static extern void GpuCounterInfo_unit_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_GpuCounterInfo_unit_get")]
  public static extern global::System.IntPtr GpuCounterInfo_unit_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_new_GpuCounterInfo")]
  public static extern global::System.IntPtr new_GpuCounterInfo();

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_delete_GpuCounterInfo")]
  public static extern void delete_GpuCounterInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_gpu_counter_info_get")]
  public static extern global::System.IntPtr gpu_counter_info_get();

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_delete_GpuProfiler")]
  public static extern void delete_GpuProfiler(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_GpuProfiler_enabled_counters")]
  public static extern global::System.IntPtr GpuProfiler_enabled_counters(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_GpuProfiler_supported_counters")]
  public static extern global::System.IntPtr GpuProfiler_supported_counters(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_GpuProfiler_set_enabled_counters")]
  public static extern void GpuProfiler_set_enabled_counters(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_GpuProfiler_run")]
  public static extern void GpuProfiler_run(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_GpuProfiler_sample")]
  public static extern global::System.IntPtr GpuProfiler_sample(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_GpuProfiler_stop")]
  public static extern void GpuProfiler_stop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_new_Value__SWIG_0")]
  public static extern global::System.IntPtr new_Value__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_new_Value__SWIG_1")]
  public static extern global::System.IntPtr new_Value__SWIG_1(long jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_new_Value__SWIG_2")]
  public static extern global::System.IntPtr new_Value__SWIG_2(double jarg1);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_Value_set__SWIG_0")]
  public static extern void Value_set__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_Value_set__SWIG_1")]
  public static extern void Value_set__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("HWCPipeAndroid", EntryPoint="CSharp_HWCPipe_delete_Value")]
  public static extern void delete_Value(global::System.Runtime.InteropServices.HandleRef jarg1);
}

}
